{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","typeList","require","forEach","e","i","checked","App","props","id","state","types","good","bad","worst","style","handleTypeChange","bind","push","border","color","console","log","this","target","name","Number","checkedValue","g","b","w","typesValue","map","type","value","background","setState","index","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,g7DCIrCC,G,YAAWC,EAAQ,KACzBD,EAASE,SAAQ,SAACC,EAAEC,GAClBJ,EAASI,GAAGC,SAAU,K,IAGHC,E,YACnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,GAAK,EAAKD,MAAMC,GACrB,EAAKC,MAAQ,CACXJ,QAAU,EACVK,MAAQV,EACRW,KAAO,GACPC,IAAM,GACNC,MAAQ,GACRC,MAAQ,IAEV,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAExBhB,EAASE,SAAQ,SAACC,EAAEC,GAClB,EAAKK,MAAMK,MAAMG,KAAK,IACtB,EAAKR,MAAMK,MAAMV,GAAGc,OAApB,qBAA2ClB,EAASI,GAAGe,UAEzDC,QAAQC,IAAI,EAAKZ,MAAMK,OAjBP,E,8EAoBDX,GAEf,KAAGmB,KAAKb,MAAMJ,SAAS,GAAGF,EAAEoB,OAAOlB,SAAnC,CACA,IAAMmB,EAAOC,OAAOtB,EAAEoB,OAAOC,MACzBE,EAAeJ,KAAKb,MAAMJ,QAC1BsB,EAAI,GACJC,EAAI,GACJC,EAAI,GACJf,EAAQ,GAENgB,EAAaR,KAAKb,MAAMC,MAAMqB,KAAI,SAACC,GAKvC,OAJGA,EAAKxB,KAAKgB,IAETQ,EAAK3B,QAAqCqB,GAA0B,EAAtDA,GAA0B,GAErC,CACLlB,GAAIwB,EAAKxB,GACTgB,KAAMQ,EAAKR,KACXb,KAAMqB,EAAKrB,KACXC,IAAKoB,EAAKpB,IACVC,MAAOmB,EAAKnB,MACZR,QAAS2B,EAAKxB,KAAKgB,GAAQQ,EAAK3B,QAAS2B,EAAK3B,YAGlDyB,EAAW5B,SAAQ,SAAC8B,EAAK5B,GACpB4B,EAAK3B,SACN2B,EAAKrB,KAAKT,SAAQ,SAAC+B,GACjBN,EAAEV,KAAKgB,MAETD,EAAKpB,IAAIV,SAAQ,SAAC+B,GAChBL,EAAEX,KAAKgB,MAETD,EAAKnB,MAAMX,SAAQ,SAAC+B,GAClBJ,EAAEZ,KAAKgB,MAETb,QAAQC,IAAIjB,GACZU,EAAMG,KAAK,IACXH,EAAMV,GAAG8B,WAAT,WAA0BlC,EAASI,GAAGe,OACtCL,EAAMV,GAAGc,OAAT,qBAAgClB,EAASI,GAAGe,SAE5CC,QAAQC,IAAIjB,GACZU,EAAMG,KAAK,IACXH,EAAMV,GAAG8B,WAAT,QACApB,EAAMV,GAAGc,OAAT,qBAAgClB,EAASI,GAAGe,WAGhDG,KAAKa,SAAS,CAACxB,KAAKgB,EAAEf,IAAIgB,EAAEf,MAAMgB,EAAExB,QAAQqB,EAAahB,MAAMoB,EAAWhB,MAAMA,O,+BAGzE,IAAD,OACFJ,EAAQY,KAAKb,MAAMC,MACvB,OACE,6BACE,6BACGY,KAAKb,MAAME,KAAK,6BAChBW,KAAKb,MAAMG,IAAI,6BACfU,KAAKb,MAAMI,MAAM,8BAEpB,4BAEEH,EAAMqB,KAAI,SAACC,EAAKI,GACd,OACE,wBAAItB,MAAO,EAAKL,MAAMK,MAAMsB,IAC1B,+BACA,2BAAOJ,KAAK,WAAWR,KAAMQ,EAAKxB,GAAIyB,MAAOD,EAAKxB,GAAIH,QAAS2B,EAAK3B,QAASgC,SAAU,EAAKtB,mBAC3FiB,EAAKR,gB,GAtFWc,IAAMC,WCGnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0824532f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst typeList = require('./typeList.json');\ntypeList.forEach((e,i) =>{\n  typeList[i].checked = false\n})\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n    this.id = this.props.id;\n    this.state = {\n      checked : 0,\n      types : typeList,\n      good : [],\n      bad : [],\n      worst : [],\n      style : []\n    }\n    this.handleTypeChange = this.handleTypeChange.bind(this)\n\n    typeList.forEach((e,i) => {\n      this.state.style.push({});\n      this.state.style[i].border = `3px solid #${typeList[i].color}`;\n    });\n    console.log(this.state.style)\n  }\n\n  handleTypeChange(e){\n    //二個以上チェックできないように\n    if(this.state.checked>=2&&e.target.checked)return\n    const name = Number(e.target.name);\n    let checkedValue = this.state.checked;\n    let g = [];\n    let b = [];\n    let w = [];\n    let style = [];\n\n    const typesValue = this.state.types.map((type)=>{\n      if(type.id===name){\n        //チェック数カウンター\n        (!type.checked)?checkedValue=checkedValue+1:checkedValue=checkedValue-1;\n      }\n      return({\n        id: type.id,\n        name: type.name,\n        good: type.good,\n        bad: type.bad,\n        worst: type.worst,\n        checked:(type.id===name)? !type.checked :type.checked,\n      })\n    });\n    typesValue.forEach((type,i)=>{\n      if(type.checked){\n        type.good.forEach((value)=>{\n          g.push(value)\n        })\n        type.bad.forEach((value)=>{\n          b.push(value)\n        })\n        type.worst.forEach((value)=>{\n          w.push(value)\n        })\n        console.log(i)\n        style.push({});\n        style[i].background = `#${typeList[i].color}`;\n        style[i].border = `3px solid #${typeList[i].color}`;\n      }else{\n        console.log(i)\n        style.push({});\n        style[i].background = `white`;\n        style[i].border = `3px solid #${typeList[i].color}`;\n      }\n    })\n    this.setState({good:g,bad:b,worst:w,checked:checkedValue,types:typesValue,style:style})\n  }\n\n  render(){\n    let types = this.state.types;\n    return(\n      <div>\n        <div>\n          {this.state.good}<br/>\n          {this.state.bad}<br/>\n          {this.state.worst}<br/>\n        </div>\n        <ul>\n        {\n          types.map((type,index)=>{\n            return(\n              <li style={this.state.style[index]}>\n                <label>\n                <input type=\"checkbox\" name={type.id} value={type.id} checked={type.checked} onChange={this.handleTypeChange}/>\n                {type.name}\n                </label>\n              </li>\n            )\n          })\n        }\n        </ul>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}