{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","typeList","require","forEach","e","i","checked","asnwerStyle","map","value","push","background","color","App","props","id","state","types","good","bad","worst","style","handleTypeChange","bind","border","console","log","this","target","name","Number","checkedValue","g","b","w","typesValue","type","setState","typesPoint","a1","a2","a3","a4","a5","className","length","index","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea4d4e45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst typeList = require('./typeList.json');\ntypeList.forEach((e,i) =>{\n  typeList[i].checked = false\n})\nlet asnwerStyle = [];\ntypeList.map((value,i)=>{\n  asnwerStyle.push({});\n  asnwerStyle[i].background = `#${typeList[i].color}`;\n})\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n    this.id = this.props.id;\n    this.state = {\n      checked : 0,\n      types : typeList,\n      good : [],\n      bad : [],\n      worst : [],\n      style : []\n    }\n    this.handleTypeChange = this.handleTypeChange.bind(this)\n\n    typeList.forEach((e,i) => {\n      this.state.style.push({});\n      this.state.style[i].border = `3px solid #${typeList[i].color}`;\n    });\n    console.log(this.state.style)\n  }\n\n  handleTypeChange(e){\n    //二個以上チェックできないように\n    if(this.state.checked>=2&&e.target.checked)return\n    const name = Number(e.target.name);\n    let checkedValue = this.state.checked;\n    let g = [];\n    let b = [];\n    let w = [];\n    let style = [];\n\n    const typesValue = this.state.types.map((type)=>{\n      if(type.id===name){\n        //チェック数カウンター\n        (!type.checked)?checkedValue=checkedValue+1:checkedValue=checkedValue-1;\n      }\n      return({\n        id: type.id,\n        name: type.name,\n        good: type.good,\n        bad: type.bad,\n        worst: type.worst,\n        checked:(type.id===name)? !type.checked :type.checked,\n      })\n    });\n    typesValue.forEach((type,i)=>{\n      if(type.checked){\n        type.good.forEach((value)=>{\n          g.push(value)\n        })\n        type.bad.forEach((value)=>{\n          b.push(value)\n        })\n        type.worst.forEach((value)=>{\n          w.push(value)\n        })\n        style.push({});\n        style[i].background = `#${typeList[i].color}`;\n        style[i].border = `3px solid #${typeList[i].color}`;\n      }else{\n        style.push({});\n        style[i].background = `white`;\n        style[i].border = `3px solid #${typeList[i].color}`;\n      }\n    })\n    this.setState({good:g,bad:b,worst:w,checked:checkedValue,types:typesValue,style:style})\n  }\n\n  render(){\n    let types = this.state.types;\n    //種類の数だけ１倍の配列を用意\n    let typesPoint = this.state.types.map(()=>{\n      return 1\n    })\n    let g = this.state.good;\n    let b = this.state.bad;\n    let w = this.state.worst;\n    //各相性ごとに倍率を計算\n    g.map((value)=>{\n      typesPoint[value-1] *= 2\n    })\n    b.map((value)=>{\n      typesPoint[value-1] *= 0.5\n    })\n    w.map((value)=>{\n      typesPoint[value-1] *= 0\n    })\n    //倍率ごとに分けて変数に代入\n    let a1 = []\n    typesPoint.map((value,i)=>{\n      if(value===4){\n        a1.push(i + 1)\n      }\n    })\n    let a2 = []\n    typesPoint.map((value,i)=>{\n      if(value===2){\n        a2.push(i + 1)\n      }\n    })\n    let a3 = []\n    typesPoint.map((value,i)=>{\n      if(value===0.5){\n        a3.push(i + 1)\n      }\n    })\n    let a4 = []\n    typesPoint.map((value,i)=>{\n      if(value===0.25){\n        a4.push(i + 1)\n      }\n    })\n    let a5 = []\n    typesPoint.map((value,i)=>{\n      if(value===0){\n        a5.push(i + 1)\n      }\n    })\n    \n    return(\n      <div className=\"wrap\">\n        <div className=\"displaySection\">\n          {a1.length!==0 &&(\n          <div>\n            <p>効果が抜群x4</p>\n            <ul>\n            {\n              typesPoint.map((value,i)=>{\n                if(value===4){\n                  return(\n                    <li style={asnwerStyle[i]}>\n                      {types[i].name}\n                    </li>\n                  )\n                }\n              })\n            }\n            </ul>\n          </div>\n          )}\n          {a2.length!==0 &&(\n          <div>\n            <p>効果が抜群x2</p>\n            <ul>\n            {\n              typesPoint.map((value,i)=>{\n                if(value===2){\n                  return(\n                    <li style={asnwerStyle[i]}>\n                      {types[i].name}\n                    </li>\n                  )\n                }\n              })\n            }\n            </ul>\n          </div>\n          )}\n          {a3.length!==0 &&(\n          <div>\n          <p>今ひとつx0.5</p>\n            <ul>\n            {\n              typesPoint.map((value,i)=>{\n                if(value===0.5){\n                  return(\n                    <li style={asnwerStyle[i]}>\n                      {types[i].name}\n                    </li>\n                  )\n                }\n              })\n            }\n            </ul>\n          </div>\n          )}\n          {a4.length!==0 &&(\n          <div>\n          <p>今ひとつx0.25</p>\n            <ul>\n            {\n              typesPoint.map((value,i)=>{\n                if(value===0.25){\n                  return(\n                    <li style={asnwerStyle[i]}>\n                      {types[i].name}\n                    </li>\n                  )\n                }\n              })\n            }\n            </ul>\n          </div>\n          )}\n          {a5.length!==0 &&(\n          <div>\n            <p>効果がない</p>\n            <ul>\n            {\n              typesPoint.map((value,i)=>{\n                if(value===0){\n                  return(\n                    <li style={asnwerStyle[i]}>\n                      {types[i].name}\n                    </li>\n                  )\n                }\n              })\n            }\n            </ul>\n          </div>\n          )}\n        </div>\n        <div className=\"buttonSection\">\n          <ul>\n          {\n            types.map((type,index)=>{\n              return(\n                <li style={this.state.style[index]}>\n                  <label>\n                  <input type=\"checkbox\" name={type.id} value={type.id} checked={type.checked} onChange={this.handleTypeChange}/>\n                  {type.name}\n                  </label>\n                </li>\n              )\n            })\n          }\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}